
def exchange(array, ar_index):
    index = int(command_input[1])
    array1 = array[:index + 1]
    array2 = array[index + 1:]
    return array2 + array1

def max_even_index(array, ar_index):
    index_max_even_odd = []
    max_even_odd_num = 0
    index_pos = []
    max_even = [ind for ind in array if ind % 2 == 0]
    for a in max_even:
        if a >= max(max_even):
            index_max_even_odd.append(a)
            max_even_odd_num = a
    if len(index_max_even_odd) >= 1:
        index_pos = len(array) - array[::-1].index(max_even_odd_num) - 1
        return f"{index_pos}"

    elif len(index_max_even_odd) == 0:
        return f"No matches"

def max_odd_index(array, ar_index):
    index_max_even_odd = []
    max_even_odd_num = 0
    index_pos = []
    max_odd = [ind for ind in array if ind % 2 != 0]
    for a in max_odd:
        if a >= max(max_odd):
            index_max_even_odd.append(a)
            max_even_odd_num = a
    if len(index_max_even_odd) >= 1:
        index_pos = len(array) - array[::-1].index(max_even_odd_num) - 1
        return f"{index_pos}"
    elif len(index_max_even_odd) == 0:
        return f"No matches"


def min_even_index(array, ar_index):
    index_min_even_odd = []
    min_even_odd_num = 0
    index_pos = []
    if action_2 == "even":
        min_even = [ind for ind in array if ind % 2 == 0]
        for i in min_even:
            if i <= min(min_even):
                index_min_even_odd.append(i)
                min_even_odd_num = i
        if len(index_min_even_odd) >= 1:
            index_pos = len(array) - array[::-1].index(min_even_odd_num) - 1
            return f"{index_pos}"
        elif len(index_min_even_odd) == 0:
            return f"No matches"

def min_odd_index(array, ar_index):
    index_min_even_odd = []
    min_even_odd_num = 0
    index_pos = []
    min_odd = [ind for ind in array if ind % 2 != 0]
    for i in min_odd:
        if i <= min(min_odd):
            index_min_even_odd.append(i)
            min_even_odd_num = i

    if len(index_min_even_odd) >= 1:
        index_pos = len(array) - array[::-1].index(min_even_odd_num) - 1
        return f"{index_pos}"
    elif len(index_min_even_odd) == 0:
        return f"No matches"

def first_even_fn(array, ar_index, action_2):
    first_even = [i for i in array if i % 2 == 0]
    first_even = first_even[:index]
    if len(array) >= index > 0:
        return f"{first_even}"
    elif index > len(array):
        return f"Invalid count"

def first_odd_fn(array, ar_index, action_2):
    first_odd = [i for i in array if i % 2 != 0]
    first_odd = first_odd[:index]
    if len(array) >= index > 0:
        return f"{first_odd}"
    elif index > len(array):
        return f"Invalid count"

def last_even_fn(array, ar_index, action_2):
    last_even = [i for i in array if i % 2 == 0]
    last_even = last_even[-index:]
    if len(array) >= index > 0:
        return f"{last_even}"
    elif index > len(array):
        return f"Invalid count"

def last_odd_fn(array, ar_index, action_2):
    last_odd = [i for i in array if i % 2 != 0]
    last_odd = last_odd[-index:]
    if len(array) >= index > 0:
        return f"{last_odd}"
    elif index > len(array):
        return f"Invalid count"

array = input().split(' ')
array = [int(x) for x in array]

command_input = input().split(' ')

while command_input[0] != "end":
    action = command_input[0]
    if action == "exchange":
        index = int(command_input[1])
        if 0 <= index < len(array):
            array = exchange(array, index)
        else:
            print(f"Invalid index")

    elif action == "max":
        action_2 = command_input[1]
        if action_2 == "even":
            print(max_even_index(array, action_2))
        elif action_2 == "odd":
            print(max_odd_index(array, action_2))

    elif action == "min":
        action_2 = command_input[1]
        if action_2 == "even":
            print(min_even_index(array, action_2))
        elif action_2 == "odd":
            print(max_odd_index(array, action_2))

    elif action == "first":
        action_2 = command_input[2]
        index = int(command_input[1])
        if action_2 == "even":
            print(first_even_fn(array, index, action_2))
        elif action_2 == "odd":
            print(first_odd_fn(array, index, action_2))

    elif action == "last":
        action_2 = command_input[2]
        index = int(command_input[1])
        if action_2 == "even":
            print(last_even_fn(array, index, action_2))
        elif action_2 == "odd":
            print(last_odd_fn(array, index, action_2))

    command_input = input().split()

print(array)

-------------------------------------------------

array = input().split()
array = list(map(int, array))
command = input()

while command != "end":
    token = command.split()
    action = token[0]
    if action == "exchange":
        index = int(token[1])
        if 0 <= index < len(array):
            array1 = array[:index + 1]
            array2 = array[index + 1:]
            array = array2 + array1
        else:
            print(f"Invalid index")

    elif action == "max":
        action_2 = token[1]
        index_max_even_odd = []
        max_even_odd_num = 0
        index_pos = []
        if action_2 == "even":

            max_even = [ind for ind in array if ind % 2 == 0]
            for a in max_even:
                if a >= max(max_even):
                    index_max_even_odd.append(a)
                    max_even_odd_num = a
            if len(index_max_even_odd) >= 1:
                index_pos = len(array) - array[::-1].index(max_even_odd_num) - 1
                print(f"{index_pos}")

            elif len(index_max_even_odd) == 0:
                print(f"No matches")

        elif action_2 == "odd":

            max_odd = [ind for ind in array if ind % 2 != 0]
            for a in max_odd:
                if a >= max(max_odd):
                    index_max_even_odd.append(a)
                    max_even_odd_num = a
            if len(index_max_even_odd) >= 1:
                index_pos = len(array) - array[::-1].index(max_even_odd_num) - 1
                print(f"{index_pos}")
            elif len(index_max_even_odd) == 0:
                print(f"No matches")

    elif action == "min":
        action_2 = token[1]
        index_min_even_odd = []
        min_even_odd_num = 0
        index_pos = []
        if action_2 == "even":

            min_even = [ind for ind in array if ind % 2 == 0]
            for i in min_even:
                if i <= min(min_even):
                    index_min_even_odd.append(i)
                    min_even_odd_num = i
            if len(index_min_even_odd) >= 1:
                index_pos = len(array) - array[::-1].index(min_even_odd_num) - 1
                print(f"{index_pos}")
            elif len(index_min_even_odd) == 0:
                print(f"No matches")

        elif action_2 == "odd":
            min_odd = [ind for ind in array if ind % 2 != 0]
            for i in min_odd:
                if i <= min(min_odd):
                    index_min_even_odd.append(i)
                    min_even_odd_num = i

            if len(index_min_even_odd) >= 1:
                index_pos = len(array) - array[::-1].index(min_even_odd_num) - 1
                print(f"{index_pos}")
            elif len(index_min_even_odd) == 0:
                print(f"No matches")

    elif action == "first":
        if token[2] == "even":
            index = int(token[1])
            first_even = [i for i in array if i % 2 == 0]
            first_even = first_even[:index]
            if len(array) >= index > 0:
                print(f"{first_even}")
            elif index > len(array):
                print(f"Invalid count")

        elif token[2] == "odd":
            index = int(token[1])
            first_odd = [i for i in array if i % 2 != 0]
            first_odd = first_odd[:index]
            if len(array) >= index > 0:
                print(f"{first_odd}")
            elif index > len(array):
                print(f"Invalid count")

    elif action == "last":
        index = int(token[1])
        if token[2] == "even":
            last_even = [i for i in array if i % 2 == 0]
            last_even = last_even[-index:]
            if len(array) >= index > 0:
                print(f"{last_even}")
            elif index > len(array):
                print(f"Invalid count")

        elif token[2] == "odd":
            last_odd = [i for i in array if i % 2 != 0]
            last_odd = last_odd[-index:]
            if len(array) >= index > 0:
                print(f"{last_odd}")
            elif index > len(array):
                print(f"Invalid count")
    command = input()

print(f"{array}")


---------------------------------------------

def is_palindrome(text):
    counter = len(text) // 2
    is_palindrome = True

    for i in range(counter):
        second_index = len(text) - 1 - i
        if text[i] != text[second_index]:
            is_palindrome = False
            break

    return is_palindrome

def solve(items):
    for item in items:
        print(is_palindrome(item))

items = input().split(', ')
solve(items)

----------------------------------------

password = input()

first_check = False
second_check = False
final_check = False
length_pass = len(password)

if length_pass < 6 or length_pass > 10:
    print(f'Password must be between 6 and 10 characters')
else:
    first_check = True

for a in password:
    if a.isalpha():
        second_check = True
    elif a.isdigit():
        second_check = True
    else:
        second_check = False
        print(f'Password must consist only of letters and digits')
        break

digits = 0

for i in password:
    if i.isdigit():
        digits += 1
        if digits >= 2 and (i.isdigit() or i.isalpha()):
            final_check = True
for b in password:
    if (b != b.isdigit() or b != b.isalpha()) and digits < 2:
        final_check = False
        print(f'Password must have at least 2 digits')
        break
    else:
        final_check = True

if first_check and second_check and final_check:
    print(f'Password is valid')

----------------------------------------


num = int(input())


def deviders(num):
    devider = []
    for i in range(1, num + 1):
        if num % i == 0 and i < num:
            devider.append(i)
    return sum(devider)
if deviders(num) == num and num > 0:
    print(f'We have a perfect number!')
else:
    print(f'It\'s not so perfect.')

---------------------------------------


def factoriel():
    num1 = int(input())
    num2 = int(input())
    for a in range(num1, 1, -1):
        num1 *= a - 1

    for b in range(num2, 1, -1):
        num2 *= b - 1

    result = num1 / num2
    print(f'{result:.2f}')
    return result

factoriel()


---------------------------


def chars_in_range(char1, char2):

    text = ''

    for i in range(chr1 + 1, chr2):
        text += chr(i) + ' '

    return text

chr1 = ord(input())
chr2 = ord(input())

res = chars_in_range(chr1, chr2)
print(res.strip())

------------------------------


def pass_btw_6_and_10(password):
    if len(password) < 6 or len(password) > 10:
        return f'Password must be between 6 and 10 characters'
    return None
def only_letters_and_str(password):

    for i in password:
        if not i.isalpha() and not i.isdigit():
            return f'Password must consist only of letters and digits'

def must_have_2_digits(password):
    digits = 0

    for a in password:
        if a.isdigit():
            digits += 1
    if digits < 2:
        return f'Password must have at least 2 digits'
    return None
validation_errors = []

def validate(password):
    validators = [
                pass_btw_6_and_10,
                only_letters_and_str,
                must_have_2_digits
            ]
    for validator in validators:
        result = validator(password)
        if result is not None:
            validation_errors.append(result)
    if len(validation_errors) == 0:
        return f'Password is valid'
    else:
        return '\n'.join(validation_errors)

password = input()
result = validate(password)
print(result)


------------------------------------


def loading_bar(number):

    lst_bar = []

    for n in range(10,  101, 10):
        if n % 10 == 0 and n <= number:
            lst_bar.append('%')
        else:
            lst_bar.append('.')

    if number < 100:
        print(f"{number}% [{''.join(lst_bar)}]")
        return f"Still loading..."
    else:
        print(f"{number}% Complete!")
        return f"[{''.join(lst_bar)}]"

num = int(input())

print(loading_bar(num))

----------------------------------

def multiplication_sign(num1, num2, num3):
    result = ''

    if num1 == 0 or num2 == 0 or num3 == 0:
        result = "zero"
    elif num1 > 0 and num2 > 0 and num3 > 0:
        result = "positive"
    elif num1 < 0 and num2 < 0 and num3 > 0:
        result = "positive"
    elif num1 > 0 and num2 < 0 and num3 < 0:
        result = "positive"
    elif num1 < 0 and num2 > 0 and num3 < 0:
        result = "positive"
    elif num1 > 0 and num2 < 0 and num3 > 0:
        result = "negative"
    elif num1 < 0 or num2 < 0 or num3 < 0:
        result = "negative"
    return result

n1 = int(input())
n2 = int(input())
n3 = int(input())

print(multiplication_sign(n1, n2, n3))


-------------------------------

res = 0

def text_checker(res):
    text_int_float = input()
    if text_int_float == 'int':
        digit = int(input())
        res = digit * 2
        print(res)

    elif text_int_float == 'real':
        digit = float(input())
        res = digit * 1.5
        print(f'{res:.2f}')

    else:
        string = input()
        res = string
        print(f'${res}$')

text_checker(res)


------------------------------------

import math

def biggest():
    x1 = float(input())
    y1 = float(input())
    x2 = float(input())
    y2 = float(input())


    diff_x1_y1 = abs(x1) + abs(y1)
    diff_x2_y2 = abs(x2) + abs(y2)
    diff_x1_y1_x2_y2 = abs(x1) + abs(y1) + abs(x2) + abs(y2)


    x3 = float(input())
    y3 = float(input())
    x4 = float(input())
    y4 = float(input())

    diff_x3_y3 = abs(x3) + abs(y3)
    diff_x4_y4 = abs(x4) + abs(y4)
    diff_x3_y3_x4_y4 = abs(x3) + abs(y3) + abs(x4) + abs(y4)


    if diff_x1_y1_x2_y2 > diff_x3_y3_x4_y4:

        if diff_x1_y1 <= diff_x2_y2:
            print(f'({math.floor(int(x1))}, {math.floor(int(y1))})({math.floor(int(y2))}, {math.floor(int(y2))}')
        else:
            print(f'({math.floor(int(x2))}, {math.floor(int(y2))})({math.floor(int(x1))}, {math.floor(int(y1))}')

    elif diff_x3_y3_x4_y4 > diff_x1_y1_x2_y2:

        if diff_x3_y3 <= diff_x4_y4:
            print(f'({math.floor(int(x3))}, {math.floor(int(y3))})({math.floor(int(x4))}, {math.floor(int(y4))})')
        else:
            print(f'({math.floor(int(x4))}, {math.floor(int(y4))})({math.floor(int(x3))}, {math.floor(int(y3))})')
    else:
        if diff_x1_y1 <= diff_x2_y2:
            print(f'({math.floor(int(x1))}, {math.floor(int(y1))})({math.floor(int(y2))}, {math.floor(int(y2))})')
        else:
            print(f'({math.floor(int(x2))}, {math.floor(int(y2))})({math.floor(int(x1))}, {math.floor(int(y1))})')

biggest()


---------------------------------



