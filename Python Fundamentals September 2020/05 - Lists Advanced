wagons_num = int(input())
list_wagons = [0] * wagons_num

cmd = input().split(' ')

command = cmd[0]

index = 0
people = 0

while command != 'End':

    if command == 'add':
        people = int(cmd[1])
        list_wagons[-1] += people

    elif command == 'insert':
        index = int(cmd[1])
        people = int(cmd[2])
        list_wagons[index] += people

    elif command == 'leave':
        index = int(cmd[1])
        people = int(cmd[2])

        list_wagons[index] -= people

    cmd = input().split(' ')
    command = cmd[0]

print(list_wagons)


---------------------------------------


command = input()
notes = [[] * 0 for i in range(10)]
while command != "End":
    tokens = command.split("-")
    index = int(tokens[0]) - 1
    element = tokens[1]
    notes[index].append(element)
    command = input()
result = []
for note in notes:
    if len(note) > 0:
        for n in note:
            result.append(n)
print(result)


--------------------------------


tasks = []

while True:
    command = input()

    if command == 'End':
        break

    token = command.split('-', maxsplit=1)
    priority = int(token[0])
    task = token[1]
    tasks.append((priority, task))


tasks_in_priority = [task_name for priority, task_name in sorted(tasks)]
print(tasks_in_priority)


---------------------------------


command = input()
notes = [0] * 10

while command != 'End':
    tokens = command.split('-')
    priority = int(tokens[0]) - 1
    note = tokens[1]
    if notes[priority] != 0:
        priority += 1
    notes.insert(priority, note)
    command = input()

result = []
for element in notes:
    if element != 0:
        result.append(element)

print(result)


---------------------------------------


numbers = input().split(', ')
indexes = [0] * len(numbers)
num = 0

for i in numbers:
    if i == ',' or i == ' ':
        continue
    num += 1
    index = num - 1

    if int(i) % 2 == 0 or num == 0:
        indexes[index] += int(index)

final_index = []
num2 = 0

for n in indexes:

    if int(numbers[0]) % 2 == 0 and num2 == 0:

        final_index.append(n)
    else:
        if n != 0:
           final_index.append(n)
    num2 += 1
print(final_index)


------------------------------


numbers = input().split(', ')

lst = [index for index, n in enumerate(numbers) if int(n) % 2 == 0]

print(lst)

---------------------------------


employees = input().split(' ')
happiness_factor = int(input())

employees = list(map(lambda x: int(x) * happiness_factor, employees))

filtered = list(filter(lambda x: x >= (sum(employees) / len(employees)), employees))

if len(filtered) >= len(employees) / 2:
    print(f'Score: {len(filtered)}/{len(employees)}. Employees are happy!')

else:
    print(f'Score: {len(filtered)}/{len(employees)}. Employees are not happy!')


------------------------------------


string_one = input().split(', ')
string_two = input().split(', ')

new_string = []

for w in string_one:
    for ind in string_two:
        if w in ind and w not in new_string:
            new_string.append(w)

print(new_string)

------------------------------------


def special_larger(x, y):
    xf = int(str(x) + str(y))
    yf = int(str(y) + str(x))
    if xf > yf:
        return True
    else:
        return False

nums = input().split(' ')
nums = [int(n) for n in nums]

for i in range(len(nums)):
    for j in range(i + 1, len(nums)):
        if not special_larger(nums[i], nums[j]):
            nums[i], nums[j] = nums[j], nums[i]

number = [str(a) for a in nums]
string_number = ''.join(number)


print(string_number)

----------------------------------


nums = input().split('.')
nums = [int(n) for n in nums]
new_number = ''

for n in range(len(nums)-1, -1, -1):

    if nums[n] < 9:
        nums[n] += 1
        break
    else:
        nums[n] = 0
for w in nums:
    new_number += (str(w) + '.')

print(new_number.rstrip('.'))


-------------------------------

rooms = int(input())
total_free_chairs = 0

enough_chairs = True

for room_n in range(1, rooms + 1):
    room_info = input().split(' ')
    room_chairs = room_info[0]
    taken_chairs = int(room_info[1])
    if taken_chairs > len(room_chairs):
        diff = taken_chairs - len(room_chairs)
        print(f'{diff} more chairs needed in room {room_n}')
        enough_chairs = False
    else:
        total_free_chairs += (len(room_chairs) - int(taken_chairs))
if enough_chairs:
    print(f'Game On, {total_free_chairs} free chairs left')


------------------------------------


maximum_electrons = int(input())
lst = [0] * maximum_electrons

for n in range(len(lst)):

    maximum_level = 2 * (n ** 2)

    if maximum_electrons >= maximum_level:
        lst.append(maximum_level)
        maximum_electrons -= maximum_level
    else:
        if maximum_electrons > 0:
            lst.append(maximum_electrons)
            maximum_electrons -= maximum_electrons
        else:
            break
lst2 = []
for l in lst:
    if l != 0:
        lst2.append(l)
print(lst2)


----------------------------

import math
nums = list(map(int, input().split(', ')))

max_num = max(nums)
number_of_groups = math.ceil(max_num / 10)

for i in range(1, number_of_groups + 1):
    current_range = []

    for num in nums:
        upper_range = i * 10
        lower_range = upper_range - 10
        if lower_range < num <= upper_range:
            current_range.append(num)

    print(f'Group of {i * 10}\'s: {current_range}')


-----------------------------


secret_message = input().split(' ')

for i in secret_message:
    word_asc = ''
    word = ''
    for a in i:
        if a.isnumeric():
            word_asc += a
        else:
            word += a

    word_asc = int(word_asc)
    word_asc = chr(word_asc)
    word = word_asc + word
    word = list(word)
    word[1], word[-1] = word[-1], word[1]
    final_word = ''.join(word)

    print(final_word, end= ' '
	

----------------------------------


numbers_list = input().split(', ')
numbers_list = [int(n) for n in numbers_list]

boundary = 10

while len(numbers_list) > 0:
    new_list = []
    for num in numbers_list:

        if num <= boundary:
            new_list.append(num)

    print(f'Group of {boundary}\'s: {new_list}')

    for i in numbers_list[::-1]:
        if i in new_list:
           numbers_list.remove(i)

    boundary += 10
	
	
----------------------------------


import math
nums = list(map(int, input().split(', ')))

max_num = max(nums)
number_of_groups = math.ceil(max_num / 10)

for i in range(1, number_of_groups + 1):
    upper_range = i * 10
    lower_range = upper_range - 10
    current_range_two = [n for n in nums if lower_range < n <= upper_range]

    print(f'Group of {i * 10}\'s: {current_range_two}')
	
	
-----------------------------------


def parse_to_char(word):
    temp = ''
    for ch in word:
        if not str(ch).isdigit():
            break

        temp += ch

    ascii_value = int(temp)
    char_value = chr(ascii_value)
    new_word = word.replace(temp, char_value)
    return new_word

def replace(word):
    temp = list(word)
    temp[1], temp[-1] = temp[-1], temp[1]
    return ''.join(temp)

def decrypt(word):
    res = parse_to_char(word)
    res = replace(res)
    return res

words = input().split()
new_words = [decrypt(word) for word in words]

print(' '.join(new_words))


---------------------------


pirateship_status = input().split('>')
warship_status = input().split('>')
maximum_health = int(input())
pirateship_status = [int(n) for n in pirateship_status]
warship_status = [int(i) for i in warship_status]
command = input().split()
pirateship_good = True
warship_good = True

while command[0] != 'Retire':
    if command[0] == 'Fire':
        index = int(command[1])
        damage = int(command[2])
        if 0 <= index < len(warship_status):
            warship_status[index] -= damage
            if int(warship_status[index]) <= 0:
                print(f'You won! The enemy ship has sunken.')
                warship_good = False
                break

    elif command[0] == 'Defend':
        start_index = int(command[1])
        end_index = int(command[2])
        damage = int(command[3])

        if 0 <= start_index < len(pirateship_status) and 0 <= end_index < len(pirateship_status):
            for i in range(start_index, end_index + 1):
                pirateship_status[i] -= damage
                if pirateship_status[i] <= 0:
                    print(f'You lost! The pirate ship has sunken.')
                    pirateship_good = False
                    break

    elif command[0] == 'Repair':
        index = int(command[1])
        health = int(command[2])
        if 0 <= index < len(pirateship_status):
            if (pirateship_status[index] + health) < maximum_health:
                pirateship_status[index] += health
            else:
                pirateship_status[index] = maximum_health

    elif command[0] == 'Status':
        repair_limit = int(0.20 * maximum_health)
        sections_for_repair = 0
        for s in pirateship_status:
            if int(s) < repair_limit:
                sections_for_repair += 1

        print(f'{sections_for_repair} sections need repair.')

    command = input().split()


if pirateship_good and warship_good:
    print(f'Pirate ship status: {sum(pirateship_status)}')
    print(f'Warship status: {sum(warship_status)}')


-----------------------------------------


def is_valid_index(length, index):
    return 0 <= index < length


pirateship = list(map(int, input().split('>')))
warship = list(map(int, input().split('>')))
length_warship = len(warship)
length_pirateship = len(pirateship)
maximum_health = int(input())

command_input = input()
stop_game = False

while command_input != 'Retire':
    tokens = command_input.split()
    command = tokens[0]

    if command == 'Fire':
        index = int(tokens[1])
        damage = int(tokens[2])

        if not is_valid_index(length_warship, index):
            command_input = input()
            continue
        warship[index] -= damage

        if warship[index] <= 0:
            print(f'You won! The enemy ship has sunken.')
            stop_game = True
            break
    elif command == 'Defend':
        first_index = int(tokens[1])
        second_index = int(tokens[2])
        damage = int(tokens[3])

        if not (is_valid_index(length_pirateship, first_index) and is_valid_index(length_pirateship, second_index)):
            command_input = input()
            continue

        for i in range(first_index, second_index + 1):
            pirateship[i] -= damage

            if pirateship[i] <= 0:
                print(f'You lost! The pirate ship has sunken.')
                stop_game = True
                break

    elif command == 'Repair':
        index = int(tokens[1])
        health = int(tokens[2])

        if not is_valid_index(length_pirateship, index):
            command_input = input()
            continue
        pirateship[index] += health

        if pirateship[index] > maximum_health:
            pirateship[index] = maximum_health

    elif command == 'Status':
        counter = 0

        for section in pirateship:
            if section < (maximum_health * 0.2):
                counter += 1
        print(f'{counter} sections need repair.')

    command_input = input()

if not stop_game:
    print(f'Pirate ship status: {sum(pirateship)}')
    print(f'Warship status: {sum(warship)}')


--------------------------------------


items_collection = input().split(", ")

command = input()

while command != "Craft!":
    token = command.split(" - ")
    action = token[0]


    if action == "Collect":
        item = token[1]
        if item not in items_collection:
            items_collection.append(item)

    elif action == "Drop":
        item = token[1]
        if item in items_collection:
            items_collection.remove(item)

    elif "Combine" in command:
        item_n = token[1].split(":")
        old_item = item_n[0]
        new_item = item_n[1]

        if old_item in items_collection:
            old_item_index = items_collection.index(old_item)
            items_collection.insert(old_item_index + 1, new_item)
    elif action == "Renew":
        item = token[1]
        if item in items_collection:
            items_collection.append(item)
            items_collection.remove(item)
    command = input()

print(f"{', '.join(items_collection)}")


------------------------------------


text_messaging = input().split()

text = input()
text = [t.split() for t in text]
new_text = []
for i in text_messaging:

    sum_message = [int(i) for i in i]
    sum_message = sum(map(int, sum_message))
    for x in text:
        if sum_message > len(text):
            text_index = sum_message - len(text)
            new_index = text[text_index]
            new_text.append(new_index)
            text.remove(new_index)
            break
        else:
            new_index = text[sum_message]
            new_text.append(new_index)
            text.remove(new_index)
            break

outlst = [' '.join([str(c) for c in lst]) for lst in new_text]
final_text = ''.join(outlst)

print(final_text)


-----------------------------------


car_race = [int(i) for i in input().split()]

finish = len(car_race) // 2

first_car_time = 0
second_car_time = 0

for first_time in range(len(car_race)):
    if first_time == finish:
        break
    elif car_race[first_time] == 0:
        first_car_time *= 0.80
    else:
        first_car_time += car_race[first_time]
iterate = 0
for second_time in car_race[::-1]:
    iterate += 1
    if second_time == 0:
        second_car_time *= 0.80
    else:
        second_car_time += second_time
    if iterate == finish:
        break

if first_car_time < second_car_time:
    print(f"The winner is left with total time: {first_car_time:.1f}")
else:
    print(f"The winner is right with total time: {second_car_time:.1f}")


------------------------------------


population = input().split(", ")
population = list(map(int, population))
minimum_wealth = int(input())
not_possible = False
max_money_index = 0

for i in range(len(population)):
    diff = abs(population[i] - minimum_wealth)
    max_money = max(population)

    max_money_index = population.index(max_money)
    if population[i] < minimum_wealth:

        if (max_money - diff) >= minimum_wealth:
            population[i] += diff
            population[max_money_index] -= diff
        else:
            print(f"No equal distribution possible")
            not_possible = True
            break
    if not_possible:
        break
if not not_possible:
    print(population)


-----------------------------------


stores_dict = {}

command = input().split("->")

while not command[0] == "END":
    action = command[0]
    store = command[1]

    if action == "Add":
        item = command[2].split(",")
        if store not in stores_dict:
            stores_dict[store] = item
        else:
            stores_dict[store] += item

    elif action == "Remove":
        if store in stores_dict:
            stores_dict.pop(store)

    command = input().split("->")

sorted_dict = dict(sorted(stores_dict.items(), key=lambda x: (len(x[1]), x[0]), reverse=True))

print(f"Stores list:")
for k, v in sorted_dict.items():
    print(f"{k}")
    for i in v:
        print(f"<<{str(i)}>>")


------------------------------------



moving_targets = input().split()
moving_targets = list(map(int, moving_targets))
command = input()

while command != "End":
    token = command.split()
    action = token[0]
    index = int(token[1])
    radius = int(token[2])
    if action == "Shoot":
        if 0 <= index < len(moving_targets):
            moving_targets[index] -= radius
            if moving_targets[index] <= 0:
                moving_targets.remove(moving_targets[index])

    elif action == "Add":
        if 0 <= index < len(moving_targets):
            moving_targets.insert(index, radius)
        else:
            print(f"Invalid placement!")

    elif action == "Strike":

        start = index - radius
        end = index + radius

        # if start >= 0 and end < len(moving_targets):
        #     del moving_targets[start: end + 1]
        # else:
        #     print("Strike missed!")

        if (end <= len(moving_targets)) and start >= 0:
            del moving_targets[start: end + 1]
        else:
            print("Strike missed!")
    command = input()

moving_targets = map(str, moving_targets)

print('|'.join(moving_targets))


-------------------------------------


neighborhood = list(map(int, input().split('@')))
length_neighborhood = len(neighborhood)
house = 0
while True:
    command = input()
    if command == 'Love!':
        break
    cupidon = command.split()
    jump_length = int(cupidon[1])
    house += jump_length
    if house >= length_neighborhood:
        house = 0
    if neighborhood[house] == 0:
        print(f"Place {house} already had Valentine's day.")
    else:
        neighborhood[house] -= 2
        if neighborhood[house] == 0:
            print(f"Place {house} has Valentine's day.")

print(f"Cupid's last position was {house}.")
count = 0
for house in range(len(neighborhood)):
    if neighborhood[house] > 0:
        count += 1

if count == 0:
    print("Mission was successful.")
else:
    print(f"Cupid has failed {count} places.")
	
	encrypted_message = input()

string_list = []
number_list = []

for i in encrypted_message:
    if i.isdigit():
        number_list.append(int(i))
        continue
    string_list.append(i)

take_list = []
skip_list = []

for index in range(len(number_list)):
    if index % 2 == 0:
        take_list.append(number_list[index])
    else:
        skip_list.append(number_list[index])

index_for_skip = 0
decrypted_message = ''
for k in range(len(take_list)):
    decrypted_message += "".join(string_list[index_for_skip:index_for_skip + take_list[k]])
    index_for_skip += skip_list[k] + take_list[k]

print(decrypted_message)
---------------------------------------------











	